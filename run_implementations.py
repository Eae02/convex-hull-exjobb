from typing import List
import subprocess
import sys


def run_implementations(implementations : List[str]):
    test_cases = [("gencirc.bin", 100, 20),("gencirc.bin", 1000, 20),("gencirc.bin", 10000, 20),("gencirc.bin", 100000, 10),("gencirc.bin", 1000000, 5),("gencirc.bin", 2000000, 5),("gencirc.bin", 4000000, 5)] #test_generator, n, num_iterations
    test_cases.extend([("gensquare.bin", 100, 20),("gensquare.bin", 1000, 20),("gensquare.bin", 10000, 20),("gensquare.bin", 100000, 10),("gensquare.bin", 1000000, 5),("gensquare.bin", 2000000, 5),("gensquare.bin", 4000000, 5),("gensquare.bin", 10000000, 5)])
    results = [] # Table of results containing: implementation_name, test_generator, seed, n, compute_time
    with open('results.csv','w') as f:
        f.write("implementation_name,test_generator,seed,n,compute_time(ms)\n")

        seed = 1000
        for test_generator, n, num_iterations in test_cases:
            print(f'Running tests generated by {test_generator} with size {n} measuring a total of {num_iterations} times')
            for _ in range(num_iterations):
                seed +=1
                with open('.testcases/tmp.in','w') as test_case_file: 
                    bash_command = [f'./testtools/{test_generator}', f'seed={seed}', 'bin=1', f'n={n}']
                    subprocess.run(bash_command, stdout = test_case_file)

                for implementation_name in implementations:
                    with open('.testcases/tmp.in','r') as test_case_file: 
                        bash_command = [f'./ch.bin', '-q', f'{implementation_name}']
                        implementation_execution = subprocess.run(bash_command, stdin = test_case_file, stderr = subprocess.PIPE, stdout = subprocess.PIPE)
                        output =  implementation_execution.stderr.decode("utf-8") 
                        compute_time_line = output.split('\n')[1]
                        compute_time = float(compute_time_line.split()[2][:-2])
                        #print(test_generator,n,seed,implementation_name,compute_time)
                        results.append((implementation_name, test_generator, seed, n, compute_time))
                        f.write(f'{implementation_name},{test_generator},{seed},{n},{compute_time}\n')





def main():
    implementations = ["chan_id3", "merge_hull", "merge_hull_rewrite", "cgal_akl_toussaint", "cgal_graham", "dc_preparata_hong_rewrite", "impl1", "qh_rec"]
    run_implementations(implementations)
    if len(sys.argv)>1 and sys.argv[1] == "plot":
        import plot_results
        plot_results.plot_results()

if __name__ == "__main__":
    main()